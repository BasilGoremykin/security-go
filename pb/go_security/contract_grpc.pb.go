// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: contract.proto

package away

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecurityService_Authenticate_FullMethodName             = "/ru.mts.smarthome.security.v1.SecurityService/authenticate"
	SecurityService_CheckPermissionForToken_FullMethodName  = "/ru.mts.smarthome.security.v1.SecurityService/checkPermissionForToken"
	SecurityService_CheckPermissionForUserId_FullMethodName = "/ru.mts.smarthome.security.v1.SecurityService/checkPermissionForUserId"
	SecurityService_AddPermissionToUser_FullMethodName      = "/ru.mts.smarthome.security.v1.SecurityService/addPermissionToUser"
	SecurityService_RemovePermissionFromUser_FullMethodName = "/ru.mts.smarthome.security.v1.SecurityService/removePermissionFromUser"
	SecurityService_ClearUserPermissions_FullMethodName     = "/ru.mts.smarthome.security.v1.SecurityService/clearUserPermissions"
)

// SecurityServiceClient is the client API for SecurityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityServiceClient interface {
	Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error)
	CheckPermissionForToken(ctx context.Context, in *TokenPermissionCheckRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error)
	CheckPermissionForUserId(ctx context.Context, in *UserPermissionCheckRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error)
	AddPermissionToUser(ctx context.Context, in *AddPermissionToUserRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error)
	RemovePermissionFromUser(ctx context.Context, in *RemovePermissionFromUserRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error)
	ClearUserPermissions(ctx context.Context, in *ClearUsersPermissionsRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error)
}

type securityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityServiceClient(cc grpc.ClientConnInterface) SecurityServiceClient {
	return &securityServiceClient{cc}
}

func (c *securityServiceClient) Authenticate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error) {
	out := new(SecurityServiceResponse)
	err := c.cc.Invoke(ctx, SecurityService_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) CheckPermissionForToken(ctx context.Context, in *TokenPermissionCheckRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error) {
	out := new(SecurityServiceResponse)
	err := c.cc.Invoke(ctx, SecurityService_CheckPermissionForToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) CheckPermissionForUserId(ctx context.Context, in *UserPermissionCheckRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error) {
	out := new(SecurityServiceResponse)
	err := c.cc.Invoke(ctx, SecurityService_CheckPermissionForUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) AddPermissionToUser(ctx context.Context, in *AddPermissionToUserRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error) {
	out := new(SecurityServiceResponse)
	err := c.cc.Invoke(ctx, SecurityService_AddPermissionToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) RemovePermissionFromUser(ctx context.Context, in *RemovePermissionFromUserRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error) {
	out := new(SecurityServiceResponse)
	err := c.cc.Invoke(ctx, SecurityService_RemovePermissionFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ClearUserPermissions(ctx context.Context, in *ClearUsersPermissionsRequest, opts ...grpc.CallOption) (*SecurityServiceResponse, error) {
	out := new(SecurityServiceResponse)
	err := c.cc.Invoke(ctx, SecurityService_ClearUserPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityServiceServer is the server API for SecurityService service.
// All implementations must embed UnimplementedSecurityServiceServer
// for forward compatibility
type SecurityServiceServer interface {
	Authenticate(context.Context, *AuthRequest) (*SecurityServiceResponse, error)
	CheckPermissionForToken(context.Context, *TokenPermissionCheckRequest) (*SecurityServiceResponse, error)
	CheckPermissionForUserId(context.Context, *UserPermissionCheckRequest) (*SecurityServiceResponse, error)
	AddPermissionToUser(context.Context, *AddPermissionToUserRequest) (*SecurityServiceResponse, error)
	RemovePermissionFromUser(context.Context, *RemovePermissionFromUserRequest) (*SecurityServiceResponse, error)
	ClearUserPermissions(context.Context, *ClearUsersPermissionsRequest) (*SecurityServiceResponse, error)
	mustEmbedUnimplementedSecurityServiceServer()
}

// UnimplementedSecurityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityServiceServer struct {
}

func (UnimplementedSecurityServiceServer) Authenticate(context.Context, *AuthRequest) (*SecurityServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSecurityServiceServer) CheckPermissionForToken(context.Context, *TokenPermissionCheckRequest) (*SecurityServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissionForToken not implemented")
}
func (UnimplementedSecurityServiceServer) CheckPermissionForUserId(context.Context, *UserPermissionCheckRequest) (*SecurityServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissionForUserId not implemented")
}
func (UnimplementedSecurityServiceServer) AddPermissionToUser(context.Context, *AddPermissionToUserRequest) (*SecurityServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionToUser not implemented")
}
func (UnimplementedSecurityServiceServer) RemovePermissionFromUser(context.Context, *RemovePermissionFromUserRequest) (*SecurityServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionFromUser not implemented")
}
func (UnimplementedSecurityServiceServer) ClearUserPermissions(context.Context, *ClearUsersPermissionsRequest) (*SecurityServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserPermissions not implemented")
}
func (UnimplementedSecurityServiceServer) mustEmbedUnimplementedSecurityServiceServer() {}

// UnsafeSecurityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityServiceServer will
// result in compilation errors.
type UnsafeSecurityServiceServer interface {
	mustEmbedUnimplementedSecurityServiceServer()
}

func RegisterSecurityServiceServer(s grpc.ServiceRegistrar, srv SecurityServiceServer) {
	s.RegisterService(&SecurityService_ServiceDesc, srv)
}

func _SecurityService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).Authenticate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_CheckPermissionForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenPermissionCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).CheckPermissionForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_CheckPermissionForToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).CheckPermissionForToken(ctx, req.(*TokenPermissionCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_CheckPermissionForUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPermissionCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).CheckPermissionForUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_CheckPermissionForUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).CheckPermissionForUserId(ctx, req.(*UserPermissionCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_AddPermissionToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).AddPermissionToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_AddPermissionToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).AddPermissionToUser(ctx, req.(*AddPermissionToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_RemovePermissionFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePermissionFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).RemovePermissionFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_RemovePermissionFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).RemovePermissionFromUser(ctx, req.(*RemovePermissionFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ClearUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUsersPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ClearUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_ClearUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ClearUserPermissions(ctx, req.(*ClearUsersPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityService_ServiceDesc is the grpc.ServiceDesc for SecurityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ru.mts.smarthome.security.v1.SecurityService",
	HandlerType: (*SecurityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "authenticate",
			Handler:    _SecurityService_Authenticate_Handler,
		},
		{
			MethodName: "checkPermissionForToken",
			Handler:    _SecurityService_CheckPermissionForToken_Handler,
		},
		{
			MethodName: "checkPermissionForUserId",
			Handler:    _SecurityService_CheckPermissionForUserId_Handler,
		},
		{
			MethodName: "addPermissionToUser",
			Handler:    _SecurityService_AddPermissionToUser_Handler,
		},
		{
			MethodName: "removePermissionFromUser",
			Handler:    _SecurityService_RemovePermissionFromUser_Handler,
		},
		{
			MethodName: "clearUserPermissions",
			Handler:    _SecurityService_ClearUserPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract.proto",
}
